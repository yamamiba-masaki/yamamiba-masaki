初期化式
ループ処理をはじめるときに実行する処理
初期化式は最初の１回だけ実行
条件式
ループ処理を続ける条件
ループ処理が1週回るたびに判定
変化式
ループ処理が実行された時に実行する処理
ループ処理が1週回るたびに実行


//4.
const names = ["いち", "に", "さん", "よん"];

for (let i = 0; i < 4; i++) {
  for (let j = 0; j < names.length; j++) {
    for (let k = 1; k < 3; k++) { 
    //console.log("i:" + i);
    // console.log("j:" + j);
    // console.log("k:" + k);
   } 
  }
 }




（処理の内容）
①先頭のfor文はiの値が0から3の間、+1カウントアップし4回ループする処理
②次のネストされたfor文はJの値が0から3(配列の長さ-1)の間、+1カウントアップし4回ループする処理（names配列のindex[0][1][2][3]を順番に取得)
③最後のネストされたfor文はkの値が1から2の間、+1カウントアップし2回ループする処理
④console.log(names[j]);はjの値0,1,2,3が入りnames配列の[0],"いち"[1],"に"[2],"さん"[3],"よん"が順番にコンソールに表示される


＜下記の処理になる理由＞　for文でネストされた場合は先頭以下の条件でループされ条件に対してfalseになった場合に先頭の処理に戻るから

（for文全体の流れ）
･iが0回目のループ　①→②→③→④("いち"表示)→②→③→④("いち"表示)　　　
　　　　　　　　　　　 ②→③→④("に"表示)  →②→③→④("に"表示)
　　　　　　　　　　   ②→③→④("さん"表示)→②→③→④("さん"表示）
　　　　　　　　　　   ②→③→④("よん"表示)→②→③→④("よん"表示）
･iが1回目のループ　同上の処理
･iが2回目のループ　同上の処理
･iが3回目のループ　同上の処理
･①の条件i<4の条件がfalseの為、ループ処理が終了


//5.
for (let i = 0; i < 2; i++) { 
  console.log("a: " + i);
  for (let i = 0; i < 2; i++) {
    console.log("b: " + i);
    for (let i = 0; i < 2; i++) {
      console.log("c: " + i);
    }
    
  }
}

（処理の内容）
①先頭のfor文はiの値が0から1の間、+1カウントアップし2回ループしコンソールに”a:”+ iの値を表示
②次のネストされたfor文はiの値が0から1の間、+1カウントアップし2回ループしコンソールに”b:”+ iの値を表示
③最後のネストされたfor文はiの値が0から1間、+1カウントアップし2回ループしコンソールに”c:”+ iの値を表示


＜下記の処理になる理由＞　for文でネストされた場合は先頭以下の条件でループされ条件に対してfalseになった場合に先頭の処理に戻るから

（for文全体の流れ）

･iが0回目のループ　①(a: 0表示)→②(b: 0表示)→③(c: 0表示)→③(c: 1表示)→②(b: 1表示)③(c: 0表示)→③(c: 1表示)
･iが1回目のループ　①(a: 1表示)→②(b: 0表示)→③(c: 0表示)→③(c: 1表示)→②(b: 1表示)③(c: 0表示)→③(c: 1表示)
･①の条件i<2の条件がfalseの為、ループ処理が終了


























